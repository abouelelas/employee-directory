{"version":3,"sources":["utils/EmpDataContext.js","components/DataBody.js","components/SearchName.js","components/Nav.js","utils/API.js","components/DataArea.js","components/Main.js","components/Wrapper.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["DataAreaContext","React","createContext","EmpData","context","useContext","EmpDataContext","undefined","developerState","filteredUsers","name","map","ID","Image","Name","Phone","Email","Location","key","data-th","className","src","alt","href","target","SearchName","type","placeholder","aria-label","onChange","e","handleSearchChange","Nav","axios","get","DataArea","useState","users","order","headings","width","setDeveloperState","useEffect","API","then","results","console","log","data","Provider","value","event","filter","filteredList","item","values","first","toLowerCase","last","indexOf","handleSort","heading","currentOrder","elem","toString","sortedUsers","sort","a","b","localeCompare","age","updatedHeadings","length","Main","Wrapper","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60004a7d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst DataAreaContext = React.createContext({\n\n});\n\nexport default DataAreaContext;","import React, { useContext } from \"react\";\nimport \"../styles/DataBody.css\"\nimport EmpDataContext from \"../utils/EmpDataContext\";\n\nconst EmpData = () => {\n    const context = useContext(EmpDataContext);\n    return (\n        <tbody>\n        {context.developerState.filteredUsers[0] !== undefined && context.developerState.filteredUsers[0].name !== undefined ? (\n          context.developerState.filteredUsers.map(({ ID, Image, Name, Phone, Email, Location }) => {\n            return (\n              <tr key={ID}>\n                <td data-th=\"Image\" className=\"align-middle\">\n                  <img\n                    src={Image}\n                    alt={\"profile image for \" + Name }\n                    className=\"img-responsive\"\n                  />\n                </td>\n                <td data-th=\"Name\" className=\"name-cell align-middle\">\n                  {Name}\n                </td>\n                <td data-th=\"Phone\" className=\"align-middle\">\n                  {Phone}\n                </td>\n                <td data-th=\"Email\" className=\"align-middle\">\n                  <a href={\"mailto:\" + Email} target=\"__blank\">\n                    {Email}\n                  </a>\n                </td>\n                <td data-th=\"Location\" className=\"align-middle\">\n                  {(Location)}\n                </td>\n              </tr>\n            );\n          })\n        ) : (\n          <></>\n        )}\n      </tbody>\n    );\n  }\n  \n  export default EmpData;\n\n","import React, { useContext } from \"react\";\n//import \"./SearchName.css\";\nimport DataAreaContext from \"../utils/EmpDataContext\";\n\nconst SearchName = () => {\n    const context = useContext(DataAreaContext);\n\n    return (\n        <div className=\"searchbox\">\n            <form className=\"form-inline\">\n                <input\n                    className=\"form-control mr-sm-2\"\n                    type=\"search\"\n                    placeholder=\"Search\"\n                    aria-label=\"Search\"\n                    onChange={e => context.handleSearchChange(e)}\n                />\n                <button className=\"btn my-2 my-sm-0\" type=\"submit\">\n                    Search\n                 </button>\n            </form>\n        </div>\n    );\n}\nexport default SearchName;","import React from 'react';\nimport SearchName from \"./SearchName\";\nimport \"../styles/Nav.css\";\n\nfunction Nav() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n\n       <div className=\"search-area col-4\">\n        <SearchName />\n    </div>\n</nav>\n    );\n}\nexport default Nav;","import axios from \"axios\";\n\nexport default {\n    // Gets all users\n    getUsers: function () {\n\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n    }\n};","import React, { useState, useEffect } from \"react\";\nimport DataTable from \"./DataBody\";\nimport Nav from \"./Nav\";\nimport API from \"../utils/API\";\nimport \"../styles/DataArea.css\";\nimport DataAreaContext from \"../utils/EmpDataContext\";\n\nconst DataArea = () => {\n    const [developerState, setDeveloperState] = useState({\n        users: [],\n        order: \"descend\",\n        filteredUsers: [],\n        headings: [\n            { name: \"Image\", width: \"10%\", order: \"descend\" },\n            { name: \"name\", width: \"10%\", order: \"descend\" },\n            { name: \"phone\", width: \"20%\", order: \"descend\" },\n            { name: \"email\", width: \"20%\", order: \"descend\" },\n            { name: \"dob\", width: \"10%\", order: \"descend\" }\n        ]\n    });\n\n    const handleSort = heading => {\n        let currentOrder = developerState.headings\n            .filter(elem => elem.name === heading)\n            .map(elem => elem.order)\n            .toString();\n\n        if (currentOrder === \"descend\") {\n            currentOrder = \"ascend\";\n        } else {\n            currentOrder = \"descend\";\n        }\n\n        const compareFnc = (a, b) => {\n            if (currentOrder === \"ascend\") {\n                // account for missing values\n                if (a[heading] === undefined) {\n                    return 1;\n                } else if (b[heading] === undefined) {\n                    return -1;\n                }\n                // numerically\n                else if (heading === \"name\") {\n                    return a[heading].first.localeCompare(b[heading].first);\n                } else if (heading === \"dob\") {\n                    return a[heading].age - b[heading].age;\n                } else {\n                    return a[heading].localeCompare(b[heading]);\n                }\n            } else {\n                // account for missing values\n                if (a[heading] === undefined) {\n                    return 1;\n                } else if (b[heading] === undefined) {\n                    return -1;\n                }\n                // numerically\n                else if (heading === \"name\") {\n                    return b[heading].first.localeCompare(a[heading].first);\n                } else if (heading === \"dob\") {\n                    return b[heading].age - a[heading].age;\n                } else {\n                    return b[heading].localeCompare(a[heading]);\n                }\n            }\n        };\n        const sortedUsers = developerState.filteredUsers.sort(compareFnc);\n        const updatedHeadings = developerState.headings.map(elem => {\n            elem.order = elem.name === heading ? currentOrder : elem.order;\n            return elem;\n        });\n\n        setDeveloperState({\n            ...developerState,\n            filteredUsers: sortedUsers,\n            headings: updatedHeadings\n        });\n    };\n\n    const handleSearchChange = event => {\n        const filter = event.target.value;\n        const filteredList = developerState.users.filter(item => {\n            let values = item.name.first.toLowerCase() + \" \" + item.name.last.toLowerCase();\n            console.log(filter, values)\n            if (values.indexOf(filter.toLowerCase()) !== -1) {\n                return item\n            };\n        });\n\n        setDeveloperState({ ...developerState, filteredUsers: filteredList });\n    };\n\n    ///https://stackoverflow.com/questions/53120972/how-to-call-loading-function-with-react-useeffect-only-once\n    useEffect(() => {\n        API.getUsers().then(results => {\n            console.log(results.data.results);\n            setDeveloperState({\n                ...developerState,\n                users: results.data.results,\n                filteredUsers: results.data.results\n            });\n        });\n    }, []);\n\n    return (\n        <DataAreaContext.Provider\n            value={{ developerState, handleSearchChange, handleSort }}\n        >\n            <Nav />\n            <div className=\"data-area\">\n                {developerState.filteredUsers.length > 0 ? <DataTable /> : <div></div>}\n            </div>\n        </DataAreaContext.Provider>\n    );\n};\n\nexport default DataArea;","import React from \"react\";\nimport DataArea from \"./DataArea\";\n// import \"../styles/Main.css\";\n\nfunction Main () {\n    return (\n      <>\n        <DataArea />\n      </>\n    );\n  };\n\nexport default Main;","import React from 'react';\n// import \"../styles/Wrapper.css\";\n\nfunction Wrapper({ children }) {\n  return (\n      <div className=\"wrapper\">\n        { children }\n      </div>\n  );\n}\n\nexport default Wrapper;","import React from 'react';\n// import \"../styles/Header.css\";\n\nfunction Header () {\n    return (\n      <div className=\"header\">\n        <h1>Employee Directory</h1>\n        <p>Click on carrots to filter by heading or use the search box to narrow your results.</p>\n      </div>\n    )\n  }\n\nexport default Header;","import React from \"react\";\nimport Main from \"./components/Main\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\n\nimport \"./styles/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header />\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}