{"version":3,"sources":["components/DataBody.js","components/Employee.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeData","props","data","columns","label","field","sort","width","rows","employees","console","log","sorting","striped","bordered","Employee","state","employeeRecords","componentDidMount","axios","get","then","records","empdata","results","employeeRecordstemp","i","length","employee","image","src","picture","medium","name","first","last","email","phone","cell","location","city","push","setState","DataBody","this","React","Component","App","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4OA4CeA,G,MAxCM,SAACC,GACpB,IAAMC,EAAO,CACXC,QAAS,CACP,CACEC,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,WACPC,MAAO,WACPC,KAAM,MACNC,MAAO,MAGXC,KAAKP,EAAMQ,WAGb,OADAC,QAAQC,IAAI,QAASV,GACd,kBAAC,IAAD,CAAcW,SAAS,EAAMC,SAAO,EAACC,UAAQ,EAACZ,KAAMA,MCE9Ca,E,4MAnCbC,MAAQ,CACNC,gBAAiB,I,EAEnBC,kBAAoB,WAClBC,IACGC,IAAI,iDACJC,MAAK,SAACC,GACL,IAAIC,EAAUD,EAAQpB,KAAKsB,QACvBC,EAAsB,GAC1Bf,QAAQC,IAAIY,GACZ,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAAK,CACvC,IAAIE,EAAW,CACbC,MAAM,yBAAKC,IAAKP,EAAQG,GAAGK,QAAQC,SACnCC,KAAMV,EAAQG,GAAGO,KAAKC,MAAQ,IAAMX,EAAQG,GAAGO,KAAKE,KACpDC,MAAOb,EAAQG,GAAGU,MAClBC,MAAOd,EAAQG,GAAGY,KAClBC,SAAUhB,EAAQG,GAAGa,SAASC,MAEhCf,EAAoBgB,KAAKb,GAE3BlB,QAAQC,IAAIc,GACZ,EAAKiB,SAAS,CAAEzB,gBAAiBQ,Q,uDAKrC,OACE,6BACE,gDACA,kBAACkB,EAAD,CAAUlC,UAAWmC,KAAK5B,MAAMC,kBAFlC,S,GA5BiB4B,IAAMC,W,MCoBdC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,aAChB,gDAEF,kBAAC,EAAD,QCVcC,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,a","file":"static/js/main.786a6177.chunk.js","sourcesContent":["import React from \"react\";\nimport { MDBDataTable } from \"mdbreact\";\n\nimport \"../styles/EmployeeStyle.css\";\nconst EmployeeData = (props) => {\n  const data = {\n    columns: [\n      {\n        label: \"Image\",\n        field: \"image\",\n        sort: \"asc\",\n        width: 500,\n      },\n      {\n        label: \"Name\",\n        field: \"name\",\n        sort: \"asc\",\n        width: 500,\n      },\n      {\n        label: \"Email\",\n        field: \"email\",\n        sort: \"asc\",\n        width: 500,\n      },\n      {\n        label: \"Phone\",\n        field: \"phone\",\n        sort: \"asc\",\n        width: 300,\n      },\n      {\n        label: \"Location\",\n        field: \"location\",\n        sort: \"asc\",\n        width: 300,\n      }\n    ],\n    rows:props.employees\n  };\n  console.log(\"Props\", props);\n  return <MDBDataTable sorting={true} striped bordered data={data} />;\n};\n\nexport default EmployeeData;\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport axios from \"axios\";\nimport DataBody from \"./DataBody\";\n\n// import \"../styles.EmployeeStyle.css\";\n\n\nclass Employee extends React.Component {\n  state = {\n    employeeRecords: [],\n  };\n  componentDidMount = () => {\n    axios\n      .get(\"https://randomuser.me/api/?results=500&nat=us\")\n      .then((records) => {\n        let empdata = records.data.results;\n        let employeeRecordstemp = [];\n        console.log(empdata)\n        for (let i = 0; i < empdata.length; i++) {\n          let employee = {\n            image:<img src={empdata[i].picture.medium}></img> ,\n            name: empdata[i].name.first + \" \" + empdata[i].name.last,\n            email: empdata[i].email,\n            phone: empdata[i].cell,\n            location: empdata[i].location.city,\n          };\n          employeeRecordstemp.push(employee);\n        }\n        console.log(employeeRecordstemp);\n        this.setState({ employeeRecords: employeeRecordstemp });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <h2>Employee Details</h2>\n        <DataBody employees={this.state.employeeRecords} />>\n      </div>\n    );\n  }\n}\n\nexport default Employee;\n\n\n\n\n\n","import React from \"react\";\nimport Employee from \"../src/components/Employee.js\";\nimport \"./styles/App.css\";\nimport {\n  Jumbotron,\n  Container,\n  Row,\n  Col,\n  ToggleButtonGroup,\n  ToggleButton,\n  Form,\n  Card,\n  Table,\n  Image,\n} from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"Jumbotron\">\n        <h1>Staff Directory</h1>\n      </header>\n      <Employee />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}